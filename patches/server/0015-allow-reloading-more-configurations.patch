From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Fri, 24 Sep 2021 21:24:42 +0200
Subject: [PATCH] allow reloading more configurations

This adds the possibility, to reload the bukkit.yml and server.properties file.
It can be called using the API (Bukkit#reloadBukkit(), Bukkit#reloadProperties())
or as a command using /reload <bukkit|properties>.

diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ec4344e97d74d05776a9076b262e1b22c44578c5..a597e4bf0285a381e2a09db86bbff24ffcaa2428 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2785,5 +2785,64 @@ public final class CraftServer implements Server {
     public void setExplosionResistance(org.bukkit.Material material, float explosionResistance) {
         CraftMagicNumbers.getBlock(material).explosionResistance = explosionResistance;
     }
+
+    @Override
+    public void reloadBukkit() {
+        configuration = YamlConfiguration.loadConfiguration(getConfigFile());
+        pluginManager.useTimings(configuration.getBoolean("settings.plugin-profiling"));
+        monsterSpawn = configuration.getInt("spawn-limits.monsters");
+        animalSpawn = configuration.getInt("spawn-limits.animals");
+        waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
+        waterAmbientSpawn = configuration.getInt("spawn-limits.water-ambient");
+        ambientSpawn = configuration.getInt("spawn-limits.ambient");
+        console.autosavePeriod = configuration.getInt("ticks-per.autosave");
+        warningState = WarningState.value(configuration.getString("settings.deprecated-verbose"));
+        TicketType.PLUGIN.timeout = Math.min(20, configuration.getInt("chunk-gc.period-in-ticks"));
+        minimumAPI = configuration.getString("settings.minimum-api");
+        loadIcon();
+
+        try {
+            playerList.getIpBans().load();
+        } catch (IOException exception) {
+            logger.log(Level.WARNING, "Failed to load banned-ips.json, " + exception.getMessage());
+        }
+
+        try {
+            playerList.getBans().load();
+        } catch (IOException exception) {
+            logger.log(Level.WARNING, "Failed to load banned-players.json, " + exception.getMessage());
+        }
+
+        for (ServerLevel level : console.getAllLevels()) {
+            level.ticksPerAnimalSpawns = getTicksPerAnimalSpawns() < 0 ? 400 : getTicksPerAnimalSpawns();
+            level.ticksPerMonsterSpawns = getTicksPerMonsterSpawns() < 0 ? 1 : getTicksPerMonsterSpawns();
+            level.ticksPerWaterSpawns = getTicksPerWaterSpawns() < 0 ? 1 : getTicksPerWaterSpawns();
+            level.ticksPerWaterAmbientSpawns = getTicksPerWaterAmbientSpawns() < 0 ? 1 : getTicksPerWaterAmbientSpawns();
+            level.ticksPerAmbientSpawns = getTicksPerAmbientSpawns() < 0 ? 1 : getTicksPerAmbientSpawns();
+        }
+    }
+
+    @Override
+    public void reloadProperties() {
+        console.settings = new DedicatedServerSettings(console.options);
+        DedicatedServerProperties config = console.settings.getProperties();
+
+        loadIcon();
+        console.setMotd(config.motd);
+        console.setPvpAllowed(config.pvp);
+        console.setPort(config.serverPort);
+        console.setLocalIp(config.serverIp);
+        console.setFlightAllowed(config.allowFlight);
+        console.setUsesAuthentication(config.onlineMode);
+        console.setEnforceWhitelist(config.enforceWhitelist);
+        console.setPlayerIdleTimeout(config.playerIdleTimeout.get());
+        console.setPreventProxyConnections(config.preventProxyConnections);
+        console.setResourcePack(config.resourcePack, console.getPackHash());
+
+        for (ServerLevel level : console.getAllLevels()) {
+            level.serverLevelData.setDifficulty(config.difficulty);
+            level.setSpawnSettings(config.spawnMonsters, config.spawnAnimals);
+        }
+    }
     // CloudPlane end
 }
