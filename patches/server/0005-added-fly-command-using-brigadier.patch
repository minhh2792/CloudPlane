From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <github@booky.tk>
Date: Fri, 25 Jun 2021 22:20:11 +0200
Subject: [PATCH] added fly command using brigadier


diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
index 69e3fe58ab3b767b87a4301672da02a0c111f713..4151bb7272e06bfa40ba5d55df9b683492d19f06 100644
--- a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
@@ -60,6 +60,8 @@ public class CloudPlaneConfig {
     public static void registerCommands(CommandDispatcher<CommandSourceStack> dispatcher) {
         commands.clear();
 
+        commands.add(new tk.booky.cloudplane.commands.FlyCommand());
+
         commands.forEach(command -> command.register(dispatcher));
     }
 
diff --git a/src/main/java/tk/booky/cloudplane/commands/FlyCommand.java b/src/main/java/tk/booky/cloudplane/commands/FlyCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..34c9053ee9d198e520ce5acc69903dd9c11e45de
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/commands/FlyCommand.java
@@ -0,0 +1,58 @@
+package tk.booky.cloudplane.commands;
+// Created by booky10 in CloudPlane (22:08 25.06.21)
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.arguments.BoolArgumentType;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class FlyCommand implements CloudPlaneCommand {
+
+    @Override
+    public void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("fly")
+                .requires((listener) -> listener.hasPermission(2, "bukkit.command.fly"))
+                .executes((context) -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException())))
+                .then(Commands.argument("allow", BoolArgumentType.bool())
+                        .executes((context) -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException()), BoolArgumentType.getBool(context, "allow")))
+                        .then(Commands.argument("targets", EntityArgument.players())
+                                .requires((listener) -> listener.hasPermission(3, "bukkit.command.fly.other"))
+                                .executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets"), BoolArgumentType.getBool(context, "allow")))
+                        )
+                )
+                .then(Commands.argument("targets", EntityArgument.players())
+                        .requires((listener) -> listener.hasPermission(3, "bukkit.command.fly.other"))
+                        .executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets")))
+                )
+        );
+    }
+
+    private int execute(CommandSourceStack sender, Collection<ServerPlayer> targets, boolean allowFlight) {
+        for (ServerPlayer player : targets) {
+            Player bukkit = player.getBukkitEntity();
+
+            bukkit.setAllowFlight(allowFlight);
+            sender.sendSuccess(player.getGameProfile().getName() + "'s fly mode was " + (allowFlight ? "enabled" : "disabled"), true);
+        }
+
+        return targets.size();
+    }
+
+    private int execute(CommandSourceStack sender, Collection<ServerPlayer> targets) {
+        for (ServerPlayer player : targets) {
+            Player bukkit = player.getBukkitEntity();
+            boolean allowFlight = !bukkit.getAllowFlight();
+
+            bukkit.setAllowFlight(allowFlight);
+            sender.sendSuccess(player.getGameProfile().getName() + "'s fly mode was " + (allowFlight ? "enabled" : "disabled"), true);
+        }
+
+        return targets.size();
+    }
+}
\ No newline at end of file
