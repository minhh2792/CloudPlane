From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Sun, 27 Jun 2021 20:30:37 +0200
Subject: [PATCH] cloudplane configuration


diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 0dde919a6e48664f687181967b8f180f8646b662..9c5d76577d15d1b637e10c724e610c4b9e173c0f 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -204,6 +204,7 @@ public class Commands {
             net.pl3x.purpur.command.UptimeCommand.register(this.dispatcher); // Purpur
             net.pl3x.purpur.command.TPSBarCommand.register(this.dispatcher); // Purpur
             net.pl3x.purpur.command.CompassCommand.register(this.dispatcher); // Purpur
+            tk.booky.cloudplane.CloudPlaneConfig.registerCommands(this.dispatcher); // CloudPlane
         }
 
         if (environment.includeIntegrated) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 55f79abf233fc29725738e8d042b5f5491a72951..df7e35fa0bbc8def7bf8e71879063ad949c1a7b5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -734,6 +734,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end
 
+        tk.booky.cloudplane.CloudPlaneConfig.registerRecipes(this.server); // CloudPlane
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
         this.connection.acceptConnections();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 16dd108b4ec98d82e12fc968d8213b95b0a6952f..20e37cdd709ff177d3c2a73939f77b15e2458c41 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -239,6 +239,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         net.pl3x.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // CloudPlane start
+        try {
+            tk.booky.cloudplane.CloudPlaneConfig.init((java.io.File) options.valueOf("cloudplane-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // CloudPlane end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 317b907d5e50974229b5973b61369e0380db06e2..09990c3cd02926cbd5218ddb4dd78e00eb351bc5 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -169,6 +169,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
 
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final tk.booky.cloudplane.CloudPlaneWorldConfig cloudplaneConfig; // CloudPlane
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
@@ -371,6 +372,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.cloudplaneConfig = new tk.booky.cloudplane.CloudPlaneWorldConfig((((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()), env); // CloudPlane
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9917cd779809d4bba3525731ca1fcc77a33903bd..86fc756dcdf9dafc14748caa4cde03f2ffb8802b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -925,6 +925,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        tk.booky.cloudplane.CloudPlaneConfig.init((File) console.options.valueOf("cloudplane-settings")); // CloudPlane
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -2594,6 +2595,13 @@ public final class CraftServer implements Server {
             return net.pl3x.purpur.PurpurConfig.config;
         }
 
+        // CloudPlane start
+        @Override
+        public YamlConfiguration getCloudPlaneConfig() {
+            return tk.booky.cloudplane.CloudPlaneConfig.config;
+        }
+        // CloudPlane end
+
         @Override
         public java.util.Properties getServerProperties() {
             return getProperties().properties;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 56674053351962a75b2731dde137dbbc0c70dbde..2d0246648d5044f5f1da43e629a0ef3af5e94860 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -155,6 +155,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // CloudPlane start
+                acceptsAll(asList("cloudplane", "cloudplane-settings"), "File for cloudplane settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("cloudplane.yml"))
+                        .describedAs("Yml file");
+                // CloudPlane end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..ddc1aff5953d7332c92be6127b3c45e863f444e7
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
@@ -0,0 +1,128 @@
+package tk.booky.cloudplane;
+
+import com.mojang.brigadier.CommandDispatcher;
+import net.minecraft.commands.CommandSourceStack;
+import org.bukkit.Bukkit;
+import org.bukkit.Server;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.inventory.Recipe;
+import tk.booky.cloudplane.commands.CloudPlaneCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.logging.Level;
+
+public class CloudPlaneConfig {
+
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static final Set<CloudPlaneCommand> commands = new HashSet<>();
+    private static final Set<Recipe> recipes = new HashSet<>();
+
+    static int version, currentVersion = 3;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException exception) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load " + configFile.getName() + ", please correct your syntax errors", exception);
+            throw new RuntimeException(exception);
+        }
+
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", currentVersion);
+        set("config-version", currentVersion);
+
+        readConfig(CloudPlaneConfig.class, null);
+    }
+
+    protected static void log(String string) {
+        if (verbose) log(Level.INFO, string);
+    }
+
+    protected static void log(Level level, String string) {
+        Bukkit.getLogger().log(level, string);
+    }
+
+    public static void registerCommands(CommandDispatcher<CommandSourceStack> dispatcher) {
+        commands.clear();
+
+
+        commands.forEach(command -> command.register(dispatcher));
+    }
+
+    public static void registerRecipes(Server server) {
+        recipes.clear();
+
+
+        recipes.forEach(server::addRecipe);
+    }
+
+    public static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (!Modifier.isPrivate(method.getModifiers())) continue;
+            if (method.getParameterTypes().length != 0 || method.getReturnType() != Void.TYPE) continue;
+
+            try {
+                method.setAccessible(true);
+                method.invoke(instance);
+            } catch (InvocationTargetException exception) {
+                throw new RuntimeException(exception);
+            } catch (Exception exception) {
+                Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, exception);
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException exception) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, exception);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    @SuppressWarnings("unchecked")
+    private static <T> List<T> getList(String path, List<T> def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+}
diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneWorldConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..047b223e23dd99f4fa972893b0231e325f9993d1
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneWorldConfig.java
@@ -0,0 +1,73 @@
+package tk.booky.cloudplane;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.List;
+import java.util.function.Predicate;
+
+import static tk.booky.cloudplane.CloudPlaneConfig.log;
+
+public class CloudPlaneWorldConfig {
+
+    private final String worldName;
+    private final World.Environment environment;
+
+    public CloudPlaneWorldConfig(String worldName, World.Environment environment) {
+        this.worldName = worldName;
+        this.environment = environment;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        CloudPlaneConfig.readConfig(CloudPlaneWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, val);
+        CloudPlaneConfig.config.set("world-settings.default." + path, val);
+        if (CloudPlaneConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            CloudPlaneConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            CloudPlaneConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = CloudPlaneConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : CloudPlaneConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getBoolean("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getDouble("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getInt("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getInt("world-settings.default." + path));
+    }
+
+    @SuppressWarnings("unchecked")
+    private <T> List<T> getList(String path, List<T> def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return (List<T>) CloudPlaneConfig.config.getList("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getString("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getString("world-settings.default." + path));
+    }
+}
diff --git a/src/main/java/tk/booky/cloudplane/commands/CloudPlaneCommand.java b/src/main/java/tk/booky/cloudplane/commands/CloudPlaneCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..1ba093f16ec68e5ba20357333098bdb32b90986f
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/commands/CloudPlaneCommand.java
@@ -0,0 +1,9 @@
+package tk.booky.cloudplane.commands;
+
+import com.mojang.brigadier.CommandDispatcher;
+import net.minecraft.commands.CommandSourceStack;
+
+public interface CloudPlaneCommand {
+
+    void register(CommandDispatcher<CommandSourceStack> dispatcher);
+}
