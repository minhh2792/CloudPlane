From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <github@booky.tk>
Date: Sun, 27 Jun 2021 20:30:37 +0200
Subject: [PATCH] cloudplane configuration


diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index bef1f6ca54fc6c1741b54b8e071a90eb5e3a36f3..2420e844b749d4c4f38c7473a80604f60c6252e9 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -202,6 +202,7 @@ public class Commands {
             net.pl3x.purpur.command.DemoCommand.register(this.dispatcher); // Purpur
             net.pl3x.purpur.command.PingCommand.register(this.dispatcher); // Purpur
             net.pl3x.purpur.command.TPSBarCommand.register(this.dispatcher); // Purpur
+            tk.booky.cloudplane.CloudPlaneConfig.registerCommands(this.dispatcher); // CloudPlane
         }
 
         if (environment.includeIntegrated) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b58fc5c39d5cf3b88c61c0bfc55d2e98385bdaeb..1eed0e7f3e4d5ddd6fa366effef6b5d954c2e685 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -227,6 +227,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         net.pl3x.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // CloudPlane start
+        try {
+            tk.booky.cloudplane.CloudPlaneConfig.init((java.io.File) options.valueOf("cloudplane-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // CloudPlane end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.getClass(); // load mappings for stacktrace deobf
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index be84cb90d167c612d2f6c33f13f904d28c8624a8..d192aaf973ae6263c062153fc085dc0eabd0ef57 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -170,6 +170,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
 
+    public final tk.booky.cloudplane.CloudPlaneWorldConfig cloudplaneConfig; // CloudPlane
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -354,6 +356,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.tuinityConfig = new com.tuinity.tuinity.config.TuinityConfig.WorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData)worlddatamutable).getLevelName()); // Tuinity - Server Config
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.cloudplaneConfig = new tk.booky.cloudplane.CloudPlaneWorldConfig((((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()), env); // CloudPlane
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 047f85c36e5b3d6145d96838453306123d7f43c8..ccf3bd936d4b6a3a55a4b5e62e6439f8adf3bcda 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -877,6 +877,7 @@ public final class CraftServer implements Server {
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         com.tuinity.tuinity.config.TuinityConfig.init((File) console.options.valueOf("tuinity-settings")); // Tuinity - Server Config
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        tk.booky.cloudplane.CloudPlaneConfig.init((File) console.options.valueOf("cloudplane-settings")); // CloudPlane
         for (ServerLevel world : this.console.getAllLevels()) {
             world.serverLevelData.setDifficulty(config.difficulty);
             world.setSpawnSettings(config.spawnMonsters, config.spawnAnimals);
@@ -2399,6 +2400,13 @@ public final class CraftServer implements Server {
             return net.pl3x.purpur.PurpurConfig.config;
         }
 
+        // CloudPlane start
+        @Override
+        public YamlConfiguration getCloudPlaneConfig() {
+            return tk.booky.cloudplane.CloudPlaneConfig.config;
+        }
+        // Cloudplane end
+
         @Override
         public java.util.Properties getServerProperties() {
             return getProperties().properties;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 01ca38ee35f2c1e5031ea4b8aca09a2a59c4a475..9084ffd416b4e9b520f8f85dc87d6617c18ad264 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -162,6 +162,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // CloudPlane start
+                acceptsAll(asList("cloudplane", "cloudplane-settings"), "File for cloudplane settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("cloudplane.yml"))
+                        .describedAs("Yml file");
+                // CloudPlane end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..69e3fe58ab3b767b87a4301672da02a0c111f713
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
@@ -0,0 +1,118 @@
+package tk.booky.cloudplane;
+// Created by booky10 in CloudPlane (20:08 27.06.21)
+
+import com.mojang.brigadier.CommandDispatcher;
+import net.minecraft.commands.CommandSourceStack;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import tk.booky.cloudplane.commands.CloudPlaneCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.logging.Level;
+
+public class CloudPlaneConfig {
+
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static final Set<CloudPlaneCommand> commands = new HashSet<>();
+
+    static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException exception) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load " + configFile.getName() + ", please correct your syntax errors", exception);
+            throw new RuntimeException(exception);
+        }
+
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 14);
+        set("config-version", 14);
+
+        readConfig(CloudPlaneConfig.class, null);
+    }
+
+    protected static void log(String string) {
+        if (verbose) log(Level.INFO, string);
+    }
+
+    protected static void log(Level level, String string) {
+        Bukkit.getLogger().log(level, string);
+    }
+
+    public static void registerCommands(CommandDispatcher<CommandSourceStack> dispatcher) {
+        commands.clear();
+
+        commands.forEach(command -> command.register(dispatcher));
+    }
+
+    public static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (!Modifier.isPrivate(method.getModifiers())) continue;
+            if (method.getParameterTypes().length != 0 || method.getReturnType() != Void.TYPE) continue;
+
+            try {
+                method.setAccessible(true);
+                method.invoke(instance);
+            } catch (InvocationTargetException exception) {
+                throw new RuntimeException(exception);
+            } catch (Exception exception) {
+                Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, exception);
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException exception) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, exception);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    @SuppressWarnings("rawtypes")
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneWorldConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..e76c9d656500841d5c9c64ece90dbd23fbeb0c20
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneWorldConfig.java
@@ -0,0 +1,70 @@
+package tk.booky.cloudplane;
+// Created by booky10 in CloudPlane (20:23 27.06.21)
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.List;
+import java.util.function.Predicate;
+
+import static tk.booky.cloudplane.CloudPlaneConfig.log;
+
+public record CloudPlaneWorldConfig(String worldName, World.Environment environment) {
+
+    public CloudPlaneWorldConfig(String worldName, World.Environment environment) {
+        this.worldName = worldName;
+        this.environment = environment;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        CloudPlaneConfig.readConfig(CloudPlaneWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, val);
+        CloudPlaneConfig.config.set("world-settings.default." + path, val);
+        if (CloudPlaneConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            CloudPlaneConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            CloudPlaneConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = CloudPlaneConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : CloudPlaneConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getBoolean("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getDouble("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getInt("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getList("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        CloudPlaneConfig.config.addDefault("world-settings.default." + path, def);
+        return CloudPlaneConfig.config.getString("world-settings." + worldName + "." + path, CloudPlaneConfig.config.getString("world-settings.default." + path));
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/tk/booky/cloudplane/commands/CloudPlaneCommand.java b/src/main/java/tk/booky/cloudplane/commands/CloudPlaneCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d5d89eb2882586f40da0aa43bd1c0b905beb301
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/commands/CloudPlaneCommand.java
@@ -0,0 +1,10 @@
+package tk.booky.cloudplane.commands;
+// Created by booky10 in CloudPlane (20:14 27.06.21)
+
+import com.mojang.brigadier.CommandDispatcher;
+import net.minecraft.commands.CommandSourceStack;
+
+public interface CloudPlaneCommand {
+
+    void register(CommandDispatcher<CommandSourceStack> dispatcher);
+}
\ No newline at end of file
