From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Fri, 25 Jun 2021 22:20:11 +0200
Subject: [PATCH] added fly command


diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
index ddc1aff5953d7332c92be6127b3c45e863f444e7..80208f307a7305b8c1146fecf7ea1ee1fa894140 100644
--- a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
@@ -62,6 +62,7 @@ public class CloudPlaneConfig {
     public static void registerCommands(CommandDispatcher<CommandSourceStack> dispatcher) {
         commands.clear();
 
+        commands.add(new tk.booky.cloudplane.commands.FlyCommand());
 
         commands.forEach(command -> command.register(dispatcher));
     }
diff --git a/src/main/java/tk/booky/cloudplane/commands/FlyCommand.java b/src/main/java/tk/booky/cloudplane/commands/FlyCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d7182bb950a179867cd1ab288eb8145f4af1f00
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/commands/FlyCommand.java
@@ -0,0 +1,45 @@
+package tk.booky.cloudplane.commands;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.arguments.BoolArgumentType;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.network.chat.TextComponent;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.entity.Player;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class FlyCommand implements CloudPlaneCommand {
+
+    @Override
+    public void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        dispatcher.register(Commands.literal("fly")
+                .requires((listener) -> listener.hasPermission(2, "cloudplane.command.fly"))
+                .executes((context) -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException()), null))
+                .then(Commands.argument("allow", BoolArgumentType.bool())
+                        .executes((context) -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException()), BoolArgumentType.getBool(context, "allow")))
+                        .then(Commands.argument("targets", EntityArgument.players())
+                                .requires((listener) -> listener.hasPermission(3, "cloudplane.command.fly.other"))
+                                .executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets"), BoolArgumentType.getBool(context, "allow")))))
+                .then(Commands.argument("targets", EntityArgument.players())
+                        .requires((listener) -> listener.hasPermission(3, "cloudplane.command.fly.other"))
+                        .executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets"), null))));
+    }
+
+    private int execute(CommandSourceStack sender, Collection<ServerPlayer> targets, Boolean allowFlight) {
+        for (ServerPlayer player : targets) {
+            Player bukkit = player.getBukkitEntity();
+            if (allowFlight == null) {
+                allowFlight = !bukkit.getAllowFlight();
+            }
+
+            bukkit.setAllowFlight(allowFlight);
+            sender.sendSuccess(new TextComponent(bukkit.getName() + "'s fly mode was " + (allowFlight ? "enabled" : "disabled")), true);
+        }
+
+        return targets.size();
+    }
+}
