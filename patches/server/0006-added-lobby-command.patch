From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Sun, 27 Jun 2021 21:22:35 +0200
Subject: [PATCH] added lobby command


diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
index 41577145f2d37635401fcc8355061ff604139b62..b9e475f40a6cf91d19271ce2371fb3c84b5de6f5 100644
--- a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
@@ -63,6 +63,7 @@ public class CloudPlaneConfig {
         commands.clear();
 
         commands.add(new tk.booky.cloudplane.commands.FlyCommand());
+        commands.add(new tk.booky.cloudplane.commands.LobbyCommand());
 
         commands.forEach(command -> command.register(dispatcher));
     }
@@ -137,4 +138,9 @@ public class CloudPlaneConfig {
 
         sleepMessage = getString("settings.sleep-message", sleepMessage);
     }
+
+    public static String lobbyServer = "lobby";
+    private static void lobbyServer() {
+        lobbyServer = getString("settings.lobby-server", lobbyServer);
+    }
 }
diff --git a/src/main/java/tk/booky/cloudplane/commands/LobbyCommand.java b/src/main/java/tk/booky/cloudplane/commands/LobbyCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..93d78c62c48141546b8996b015c1b6151ba5ccc1
--- /dev/null
+++ b/src/main/java/tk/booky/cloudplane/commands/LobbyCommand.java
@@ -0,0 +1,65 @@
+package tk.booky.cloudplane.commands;
+
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.builder.LiteralArgumentBuilder;
+import com.mojang.brigadier.tree.CommandNode;
+import com.mojang.brigadier.tree.LiteralCommandNode;
+import io.netty.buffer.Unpooled;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraft.commands.arguments.EntityArgument;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.Nullable;
+import tk.booky.cloudplane.CloudPlaneConfig;
+
+import java.util.Collection;
+import java.util.Collections;
+
+public class LobbyCommand implements CloudPlaneCommand {
+
+    private static final ClientboundCustomPayloadPacket PACKET;
+
+    static {
+        ResourceLocation channel = new ResourceLocation("bungeecord", "main");
+        FriendlyByteBuf buffer = new FriendlyByteBuf(Unpooled.buffer());
+
+        buffer.writeUtf("Connect");
+        buffer.writeUtf(CloudPlaneConfig.lobbyServer);
+
+        PACKET = new ClientboundCustomPayloadPacket(channel, buffer);
+    }
+
+    @Override
+    public void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        LiteralCommandNode<CommandSourceStack> node = dispatcher.register(requiredBuilder("lobby", null)
+                .executes((context) -> execute(context.getSource(), Collections.singleton(context.getSource().getPlayerOrException())))
+                .then(Commands.argument("targets", EntityArgument.players())
+                        .requires((listener) -> listener.hasPermission(2, "bukkit.command.lobby.other"))
+                        .executes((context) -> execute(context.getSource(), EntityArgument.getPlayers(context, "targets")))));
+
+        dispatcher.register(requiredBuilder("hub", node));
+        dispatcher.register(requiredBuilder("quit", node));
+        dispatcher.register(requiredBuilder("leave", node));
+        dispatcher.register(requiredBuilder("l", node));
+        dispatcher.register(requiredBuilder("exit", node));
+        dispatcher.register(requiredBuilder("hub", node));
+    }
+
+    private LiteralArgumentBuilder<CommandSourceStack> requiredBuilder(String alias, @Nullable CommandNode<CommandSourceStack> redirection) {
+        LiteralArgumentBuilder<CommandSourceStack> builder = Commands.literal(alias);
+        builder.requires((listener) -> listener.hasPermission(1, "bukkit.command.lobby"));
+        return redirection != null ? builder.redirect(redirection) : builder;
+    }
+
+    private int execute(CommandSourceStack sender, Collection<ServerPlayer> targets) {
+        for (ServerPlayer player : targets) {
+            sender.sendSuccess("You were sent to the lobby", true);
+            player.connection.send(PACKET);
+        }
+
+        return targets.size();
+    }
+}
