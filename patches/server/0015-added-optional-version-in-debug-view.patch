From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Tue, 24 Aug 2021 20:43:57 +0200
Subject: [PATCH] added optional version in debug view


diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 7e8f86c98a9dcaee90f0415dd64b2d1d9c6f5def..fbe31cd2557332450ce84dc41d392b07bbce4287 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -176,6 +176,7 @@ public abstract class PlayerList {
     }
     abstract public void loadAndSaveFiles(); // Paper - moved from DedicatedPlayerList constructor
 
+    private static final java.util.regex.Pattern VERSION_PATTERN = java.util.regex.Pattern.compile("This server is running .+ version .+ \\(Implementing API version .+\\)( \\(Git: .+\\))"); // CloudPlane
     public void placeNewPlayer(Connection connection, ServerPlayer player) {
         player.isRealPlayer = true; // Paper - Chunk priority
         ServerPlayer prev = pendingPlayers.put(player.getUUID(), player);// Paper
@@ -269,7 +270,14 @@ public abstract class PlayerList {
         // Spigot - view distance
         playerconnection.send(new ClientboundLoginPacket(player.getId(), player.gameMode.getGameModeForPlayer(), player.gameMode.getPreviousGameModeForPlayer(), BiomeManager.obfuscateSeed(worldserver1.getSeed()), worlddata.isHardcore(), this.server.levelKeys(), this.registryHolder, worldserver1.dimensionType(), worldserver1.dimension(), this.getMaxPlayers(), worldserver1.getChunkSource().chunkMap.playerChunkManager.getLoadDistance(), flag1, !flag, worldserver1.isDebug(), worldserver1.isFlat())); // Paper - no-tick view distance // Paper - replace old player chunk management
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
-        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+        // CloudPlane start
+        String gitInfo = "";
+        if (tk.booky.cloudplane.CloudPlaneConfig.debugVersion) {
+            java.util.regex.Matcher matcher = VERSION_PATTERN.matcher(org.bukkit.Bukkit.getVersionMessage());
+            if (matcher.find()) gitInfo = matcher.group(1);
+        }
+        playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName() + gitInfo)));
+        // CloudPlane end
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
diff --git a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
index 74f499932b0be687696725d43b56e22fa2e7b46c..6a18adb3cce61564883f0f4e423d03f05fb97b34 100644
--- a/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
+++ b/src/main/java/tk/booky/cloudplane/CloudPlaneConfig.java
@@ -173,4 +173,9 @@ public class CloudPlaneConfig {
     private static void localizing() {
         localizeItems = getBoolean("settings.localize.items", localizeItems);
     }
+
+    public static boolean debugVersion = false;
+    private static void debugVersion() {
+        debugVersion = getBoolean("settings.debug-version", debugVersion);
+    }
 }
